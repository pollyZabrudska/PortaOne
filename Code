#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <ctime>
#include <algorithm>

using namespace std;

int main() {
    clock_t start = clock();
    
    ifstream inputFile("10m.txt");
    
    if (!inputFile) {
        cerr << "Error opening file." << endl;
        return 1;
    }

    vector<int> numbers;
    string line;
    
    while (getline(inputFile, line)) {
        stringstream ss(line);
        int num;
        while (ss >> num) {
            numbers.push_back(num);
        }
    }

    inputFile.close();

    int maxNumber = numbers[0];
    int minNumber = numbers[0];
    for (int i = 1; i < numbers.size(); ++i) {
        if (numbers[i] > maxNumber) {
            maxNumber = numbers[i];
        }
        if (numbers[i] < minNumber) {
            minNumber = numbers[i];
        }
    }

    sort(numbers.begin(), numbers.end());
    double median;
    int n = numbers.size();
    if (n % 2 == 0) {
        median = (numbers[n / 2 - 1] + numbers[n / 2]) / 2.0;
    } else {
        median = numbers[n / 2];
    }

    double sum = 0;
    for (int num : numbers) {
        sum += num;
    }
    double average = sum / n;

    vector<int> increasingSequence;
    vector<int> longestIncreasingSequence;
    for (int i = 0; i < n; ++i) {
        if (i == 0 || numbers[i] > numbers[i - 1]) {
            increasingSequence.push_back(numbers[i]);
        } else {
            if (increasingSequence.size() > longestIncreasingSequence.size()) {
                longestIncreasingSequence = increasingSequence;
            }
            increasingSequence.clear();
            increasingSequence.push_back(numbers[i]);
        }
    }

    vector<int> decreasingSequence;
    vector<int> longestDecreasingSequence;
    for (int i = 0; i < n; ++i) {
        if (i == 0 || numbers[i] < numbers[i - 1]) {
            decreasingSequence.push_back(numbers[i]);
        } else {
            if (decreasingSequence.size() > longestDecreasingSequence.size()) {
                longestDecreasingSequence = decreasingSequence;
            }
            decreasingSequence.clear();
            decreasingSequence.push_back(numbers[i]);
        }
    }

    clock_t end = clock();

    double duration = double(end - start) / CLOCKS_PER_SEC;

    cout << "The largest number in the file is: " << maxNumber << endl;
    cout << "The smallest number in the file is: " << minNumber << endl;
    cout << "The median of the numbers is: " << median << endl;
    cout << "The average of the numbers is: " << average << endl;
    cout << "The longest increasing sequence is: ";
    for (int num : longestIncreasingSequence) {
        cout << num << " ";
    }
    cout << endl;
    cout << "The longest decreasing sequence is: ";
    for (int num : longestDecreasingSequence) {
        cout << num << " ";
    }
    cout << endl;
    cout << "Time taken: " << duration << " seconds" << endl;

    return 0;
}
